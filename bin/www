#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
var ip = require('ip');
var conn = require('../objs/SqlConnection.js');
var request = require('ajax-request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  setServerIp();
}

function setServerIp() {
  var ipServer = ip.address();
  console.log("My ip: " + ipServer);

  var connection = new conn.SqlConnection().connection;
  connection.connect(function(err) {
    if (err) {
      console.error('error connecting: ' + err.stack);
      return;
    }

    var query = 
      "UPDATE app_params SET `value` = ? WHERE `name` = 'SERVER_IP'";

    var p = [ipServer];  
    connection.query(query, p, function(err, rows) {
    
      if (err) {
        console.error('error query: ' + query + err.stack);
      }
      else{
        console.log('Ip configured.');
        validateLicense();
      }
    });
  });
}

function validateLicense() {
  var connection = new conn.SqlConnection().connection;
  connection.connect(function(err) {
    if (err) {
      console.error('error connecting: ' + err.stack);
      return;
    }

    var query = 
        "SELECT\
        (\
          SELECT\
            `value`\
          FROM\
            app_params\
          WHERE\
            `name` = 'LICENSE'\
        ) as license,\
        (\
          SELECT\
            `value`\
          FROM\
            app_params\
          WHERE\
            `name` = 'SERVER_IP'\
        ) as serverIp";

    connection.query(query, function(err, rows) {
    
      if (err) {
        console.error('error query: ' + query + err.stack);
        return;
      }

      var license = rows[0].license;
      var serverIp = rows[0].serverIp;

      console.log("Validating license: " + license);

      var data = {
        status:"false",
        data:{}
      };
     
      request({
        url: process.env.LICENSE_SERVER,
        method: 'GET',
        data: {
          licencia: license,
          bundle_id: process.env.BUNDLE_ID,
          dispositivo_id: serverIp,
          primera_vez: 'false'
        }
      }, function(er, response, body) {
        if (er) {
          console.error('error query: ' + er.stack);
          decreaseAttempt();
          return;
        }

        try {
          var resData = JSON.parse(body);
        } catch (e) {
          console.log("res is not JSON.");
          decreaseAttempt();
          return;
        }

        if(resData.result == 'success'){
          if(resData.message_id == 0){
            console.log("license OK");
          }
          else{
            console.log("message_id: " + resData.message_id);
            decreaseAttempt();
            return;
          }
        }
        else{
          console.log("result error");
          decreaseAttempt();
          return;
        }
      });
    });
  });
}

function decreaseAttempt() {
  var connection = new conn.SqlConnection().connection;
  connection.connect(function(err) {
    if (err) {
      console.error('error connecting: ' + err.stack);
      return;
    }

    var query = "CALL decrease_attempts()";
    connection.query(query, function(err, rows) {
    
      if (err) {
        console.error('error query: ' + query + err.stack);
        return;
      }

      console.log("Attempt decreased");
    });
  });
}
